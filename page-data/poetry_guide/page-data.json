{"componentChunkName":"component---src-templates-blog-post-js","path":"/poetry_guide/","result":{"data":{"site":{"siteMetadata":{"title":"NiNyYoon"}},"markdownRemark":{"id":"82102803-98cc-5381-b01a-317e5db07032","excerpt":"최근 SAM(Segment-Anything-Model)을 활용해 이미지 처리 데스크톱 앱을 만들 일이 생겨, Python 개발 환경을 구성하려던 중, Poetry라는 도구를 알게 되었습니다. 그동안 Conda…","html":"<p>최근 SAM(Segment-Anything-Model)을 활용해 이미지 처리 데스크톱 앱을 만들 일이 생겨,<br>\nPython 개발 환경을 구성하려던 중, <strong>Poetry</strong>라는 도구를 알게 되었습니다.<br>\n그동안 Conda 를 주로 사용해왔고, 간단한 분석용 스크립트나 실험 환경을 구성할 때 꽤 유용하게 느껴졌습니다.<br>\n하지만 이번에는 실제 배포가 가능한 데스크톱 앱을 만들어야 했기 때문에,<br>\n<strong>의존성 관리, 버전 고정, 패키징</strong>에 강점과 <strong>협업 이점</strong>까지 있는 Petry 를 사용하게 되어 간단한 사용법을 공유합니다.</p>\n<blockquote>\n<p>기본적인 사용법과 가상환경 생성, Jupyter 커널 생성까지만 다루고 패키징은 따로 다루지 않습니다.</p>\n</blockquote>\n<h2>✅ 1. Python 설치 확인</h2>\n<p>Poetry는 Python 기반으로 동작하므로 Python이 반드시 설치되어 있어야 합니다. 아래 명령어로 설치 여부를 확인하세요.</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">python <span class=\"token parameter variable\">--version</span></code></pre></div>\n<p>설치되어 있지 않다면 <a href=\"https://www.python.org/downloads/\">Python 공식 사이트</a>에서 설치하세요. <strong>설치 시 \"Add Python to PATH\" 옵션을 반드시 체크</strong>해야 합니다.</p>\n<h2>✅ 2. Poetry 설치</h2>\n<p>PowerShell에서 아래 명령어를 실행하세요.</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">WebRequest <span class=\"token parameter variable\">-Uri</span> https://install.python-poetry.org -UseBasicParsing<span class=\"token punctuation\">)</span>.Content <span class=\"token operator\">|</span> python -</code></pre></div>\n<p>설치 경로는 일반적으로 다음과 같습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">C:<span class=\"token punctuation\">\\</span>Users<span class=\"token punctuation\">\\</span><span class=\"token punctuation\">{</span>사용자명<span class=\"token punctuation\">}</span><span class=\"token punctuation\">\\</span>AppData<span class=\"token punctuation\">\\</span>Roaming<span class=\"token punctuation\">\\</span>Python<span class=\"token punctuation\">\\</span>Scripts</code></pre></div>\n<p>해당 경로를 사용자 환경 변수 또는 시스템 환경 변수에 추가해야 <code class=\"language-text\">poetry</code> 명령어가 정상적으로 인식됩니다.<br>\n설치 확인:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">poetry <span class=\"token parameter variable\">--version</span></code></pre></div>\n<h2>✅ 3. 프로젝트 생성</h2>\n<h3>새로운 프로젝트 생성</h3>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">poetry new myproject\r\n<span class=\"token builtin class-name\">cd</span> myproject</code></pre></div>\n<h3>기존 프로젝트에 Poetry 적용</h3>\n<p>해당 프로젝트 폴더로 이동 -> 명령어 입력</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">poetry init</code></pre></div>\n<p>기본적으로 아래와 같은 프로젝트 구조가 생성됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">myproject/\r\n├── pyproject.toml\r\n├── src/\r\n│   └── myproject/\r\n│        └── __init__.py\r\n└── tests/\r\n    └── __init__.py</code></pre></div>\n<h2>✅ 4. 가상환경 생성 및 진입</h2>\n<p>Poetry는 자체적으로 <code class=\"language-text\">.venv</code> 폴더를 생성해 가상환경을 관리합니다. <strong>2.0 버전 이상</strong>에서는 쉘 기능이 플러그인으로 분리되었으므로 아래 명령으로 추가하세요.</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">poetry self <span class=\"token function\">add</span> poetry-plugin-shell</code></pre></div>\n<p>가상환경 생성 및 진입:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">poetry <span class=\"token function\">install</span>\r\npoetry shell</code></pre></div>\n<p>특정 Python 버전을 사용할 경우:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">poetry <span class=\"token function\">env</span> use python3.12</code></pre></div>\n<p>Windows에서는 Python 경로를 직접 지정:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">poetry <span class=\"token function\">env</span> use C:<span class=\"token punctuation\">\\</span>Users<span class=\"token punctuation\">\\</span><span class=\"token punctuation\">{</span>사용자명<span class=\"token punctuation\">}</span><span class=\"token punctuation\">\\</span>AppData<span class=\"token punctuation\">\\</span>Local<span class=\"token punctuation\">\\</span>Programs<span class=\"token punctuation\">\\</span>Python<span class=\"token punctuation\">\\</span>Python312<span class=\"token punctuation\">\\</span>pythonw.exe</code></pre></div>\n<h2>✅ 5. 패키지 및 라이브러리 추가</h2>\n<p>패키지 추가:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">poetry <span class=\"token function\">add</span> numpy</code></pre></div>\n<p>버전을 고정해서 설치:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">poetry <span class=\"token function\">add</span> numpy@1.26.4</code></pre></div>\n<p>개발용 패키지 추가:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">poetry <span class=\"token function\">add</span> <span class=\"token parameter variable\">--dev</span> 패키지명</code></pre></div>\n<p>추가 시 <code class=\"language-text\">pyproject.toml</code> 파일의 <code class=\"language-text\">tool.poetry.dependencies</code> 섹션에 자동으로 등록됩니다.</p>\n<h2>✅ 6. 가상환경 종료</h2>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token builtin class-name\">exit</span></code></pre></div>\n<h2>✅ 7. Python 버전 변경 시 lock 파일 재생성</h2>\n<p>pyproject.toml에서 Python 버전을 수정한 후 poetry install을 실행하면 버전 불일치 오류가 발생할 수 있습니다. 이 경우 다음 명령어로 해결합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">poetry lock\r\npoetry <span class=\"token function\">install</span></code></pre></div>\n<hr>\n<h1>💻 Jupyter Notebook에서 Poetry 가상환경 사용하기</h1>\n<h2>✅ 1. Jupyter Notebook 설치</h2>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">poetry <span class=\"token function\">add</span> jupyter ipykernel\r\npoetry <span class=\"token function\">add</span> <span class=\"token parameter variable\">--dev</span> notebook ipykernel</code></pre></div>\n<p>Jupyter Lab을 설치할 경우:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">poetry <span class=\"token function\">add</span> <span class=\"token parameter variable\">--dev</span> jupyterlab ipykernel</code></pre></div>\n<h2>✅ 2. 가상환경을 Jupyter 커널로 추가</h2>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">poetry run python <span class=\"token parameter variable\">-m</span> ipykernel <span class=\"token function\">install</span> <span class=\"token parameter variable\">--user</span> <span class=\"token parameter variable\">--name</span> MyApp-py312 --display-name <span class=\"token string\">\"MyApp (Python 3.12)\"</span></code></pre></div>\n<ul>\n<li>--name : 가상환경 이름</li>\n<li>--display-name : Jupyter에서 표시될 이름</li>\n</ul>\n<h2>✅ 3. Jupyter Notebook 실행</h2>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">poetry run jupyter notebook</code></pre></div>\n<p>웹 브라우저에서 Jupyter Notebook이 열립니다.</p>\n<h2>✅ 4. Jupyter Notebook 커널 변경</h2>\n<p>Notebook 내에서 <strong>Kernel > Change kernel</strong> 메뉴에서 방금 추가한 \"MyApp (Python 3.12)\"를 선택합니다.</p>\n<h2>✅ 추가 - Jupyter 커널 삭제</h2>\n<p>설치된 커널 목록 확인:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">jupyter kernelspec list</code></pre></div>\n<p>원하는 커널 삭제:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">jupyter kernelspec uninstall MyApp-py312</code></pre></div>\n<hr>\n<h1>🎉 마무리</h1>\n<p>Poetry의 고급 기능을 잘 활용하면 패키지 충돌 최소화, 가상환경 관리 효율 향상, 협업 시 일관성 유지 등 실무에서 다양한 이점을 얻을 수 있습니다.</p>\n<p>추가로 poetry config를 통해 글로벌 설정도 변경 가능하니 상황에 맞게 커스터마이징할 수 있습니다.</p>","frontmatter":{"title":"Poetry 사용법 정리 - python 가상환경 관리","date":"May 12, 2025","description":"python 가상환경 관리 툴인 Poetry 사용법을 정리합니다.","tags":["Python","가상환경"]}},"previous":null,"next":{"fields":{"slug":"/markdown_description/"},"frontmatter":{"title":"마크다운(Markdown) 작성 문법 정리"}}},"pageContext":{"id":"82102803-98cc-5381-b01a-317e5db07032","previousPostId":null,"nextPostId":"2914337a-de42-545a-acfb-e4311487c65e"}},"staticQueryHashes":["2046863741","2841359383","3274528899"],"slicesMap":{}}